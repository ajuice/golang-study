package main

import "fmt"

/**
算术运算符：	+	-	*	/	%	++	--
关系运算符：	==	!=	<=	>=	<	>
逻辑运算符：	!	&&	||
位运算：		&（按位与）	|（按位或）	^（按位取反）	<<（左移）	>>（右移）
赋值运算符：	=	+=	-=	*=	/=	%=	<<=	 >>=	&=	^=	|=
其他运算符：	&（取地址）	*（取指针值） <-（Go Channel相关运算符）
*/

// 自增自减运算符，只能后运算符，且只能单独使用，不能在表达式中使用
func add() {
	a := 0
	//a = a++ 错误用法
	a++
	fmt.Println("--a--", a) // 1
}

// 位运算
/**
&     按位与，参与运算的两个数二进制位相与：同时为1，结果为1，否则为0
|     按位或，参与运算的两个数二进制位相或：有一个为1，结果为1，否则为0
^     按位异或：二进位不同，结果为1，否则为0
<<    按位左移：二进位左移若干位，高位丢弃，低位补0，左移n位其实就是乘以2的n次方
>>    按位右移：二进位右移若干位，右移n位其实就是除以2的n次方
*/

// 进制转换
/**

二进制：只有0和1，Go中不能直接使用二进制表示整数
八进制：0-7，以数字0开头
十进制：0-9
十六进制：0-9以及A-F，以0X开头，A-F以及X不区分大小写
*/

// 源码 反码 补码
/**
	整数： 三位一体，源码 反码 补码是一样的
	负数：负数的反码=原码符号位不变，其他位取反，补码是反码+1
         1              -1
原码  0000  0001        1000  0001
反码  0000  0001        1111  1110
补码  0000  0001        1111  1111
*/

// 补充

/**
常见理解：

0的反码补码都是0
计算机中是以补码形式运算的
*/
func main() {
	add()
}
